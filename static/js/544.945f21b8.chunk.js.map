{"version":3,"file":"static/js/544.945f21b8.chunk.js","mappings":"4NAEaA,EAAOC,EAAAA,EAAAA,GAAH,4JASJC,EAAOD,EAAAA,EAAAA,GAAH,4UAgBJE,EAAQF,EAAAA,EAAAA,IAAH,gS,SCOlB,EA5BmB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAe,OAAIJ,GAAQK,MAC/B,SAACC,EAAOC,GAAR,OAAmBA,EAAOC,WAAaF,EAAME,UAA7C,IAEF,OACE,SAACZ,EAAD,UACGQ,EAAaK,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACpC,OACE,SAACd,EAAD,WACE,UAAC,KAAD,CAAMe,GAAE,UAAKZ,GAAL,OAAYS,GAAMI,MAAO,CAAEC,KAAMb,GAAzC,WACE,SAACH,EAAD,CACEiB,IACEL,EAAW,yCAC2BA,GAClC,6DAENM,IAAKL,KAEP,uBAAIA,QCNE,eAACM,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDJCG,GAcd,KAGN,C,gFE9BYC,EAAY9B,EAAAA,EAAAA,QAAH,0JAWT+B,EAAQ/B,EAAAA,EAAAA,GAAH,kD,SCDlB,EATgB,SAAC,GAAyB,IAAvBe,EAAsB,EAAtBA,MAAOiB,EAAe,EAAfA,SACxB,OACE,UAACF,EAAD,WACGf,IAAS,SAACgB,EAAD,UAAQhB,IACjBiB,IAGN,C,kHCsBD,UAzBa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAO9B,EAAP,KAAe+B,EAAf,KAcA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,gHAEgBC,EAAAA,EAAAA,MAFhB,gBAEFC,EAFE,EAEFA,QACRJ,EAAUI,GAHA,iDAKS,IAAIC,iBACZC,QAND,yDAAH,qDASXJ,GACD,GAAE,KAGD,2BACE,SAAC,IAAD,CACErB,MAAO,iBADT,UAEE,SAAC,IAAD,CAAYZ,OAAQA,EAAQC,KAAM,eAIzC,C,sLC5BKqC,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAR,EAAW,mCAAG,oGACFI,EAAIK,IAAI,sBADN,cACnBC,EADmB,yBAElBA,EAASC,MAFS,2CAAH,qDAKXC,EAAe,mCAAG,WAAMC,GAAN,uFACNT,EAAIK,IAAJ,8BACEK,mBAAmBD,KAFf,cACvBH,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfI,EAAY,mCAAG,WAAMvC,GAAN,uFACH4B,EAAIK,IAAJ,iBAAkBjC,IADf,cACpBkC,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZK,EAAY,mCAAG,WAAMxC,GAAN,uFACH4B,EAAIK,IAAJ,iBAAkBjC,EAAlB,aADG,cACpBkC,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZM,EAAe,mCAAG,WAAMzC,GAAN,uFACN4B,EAAIK,IAAJ,iBAAkBjC,EAAlB,aADM,cACvBkC,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","../node_modules/nanoid/index.browser.js","components/Section/Section.styled.jsx","components/Section/Section.jsx","pages/Home/Home.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-wrap: wrap;\n    column-gap: 16px;\n    row-gap: 28px;\n  }\n`;\n\nexport const Item = styled.li`\n  @media screen and (max-width: 767px) {\n    margin-bottom: 24px;\n  }\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 16px) / 2);\n  }\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 48px) / 4);\n\n    &:hover img{\n    transform: scale(1.03);\n  }\n  }\n`;\nexport const Image = styled.img`\n  margin-bottom: 12px;\n  width: 100%;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  @media screen and (min-width: 768px) {\n    height: 540px;\n\n    object-fit: cover;\n  }\n\n  @media screen and (min-width: 1280px) {\n    height: 460px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\n\nimport { List, Item, Image } from 'components/MoviesList/MoviesList.styled';\n\nconst MoviesList = ({ movies, flag }) => {\n  const location = useLocation();\n  const sortedMovies = [...movies].sort(\n    (first, second) => second.popularity - first.popularity\n  );\n  return (\n    <List>\n      {sortedMovies.map(({ id, poster_path, title }) => {\n        return (\n          <Item key={nanoid()}>\n            <Link to={`${flag}${id}`} state={{ from: location }}>\n              <Image\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                    : 'https://www.reelviews.net/resources/img/default_poster.jpg'\n                }\n                alt={title}\n              />\n              <p>{title}</p>\n            </Link>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  flag: PropTypes.string,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const SectionEl = styled.section`\n\n  padding: 24px 16px;\n\n  @media screen and (min-width: 480px){\n    padding: 24px 16px;\n  }\n\n  background-color: #293a36;\n`;\n\nexport const Title = styled.h2`\n    margin-bottom: 32px;\n`","import PropTypes from 'prop-types';\nimport { SectionEl, Title } from 'components/Section/Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionEl>\n      {title && <Title>{title}</Title>}\n      {children}\n    </SectionEl>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import { useEffect, useState } from 'react';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Section from 'components/Section/Section';\n\nimport { getTrending } from 'services/movies-api';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const { results } = await getTrending();\n        setMovies(results);\n      } catch (error) {\n        const controller = new AbortController();\n        controller.abort();\n      }\n    };\n    fetch();\n  }, []);\n\n  return (\n    <main>\n      <Section\n        title={'Trending today'}>\n        <MoviesList movies={movies} flag={'movies/'} />\n      </Section>\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '0a5061ab0f3f7e359a07b52243a53d24',\n  },\n});\n\nexport const getTrending = async () => {\n  const response = await api.get('trending/movie/day');\n  return response.data;\n};\n\nexport const getMovieByQuery = async query => {\n  const response = await api.get(\n    `/search/movie?query=${encodeURIComponent(query)}`\n  );\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await api.get(`/movie/${id}`);\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await api.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await api.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n"],"names":["List","styled","Item","Image","movies","flag","location","useLocation","sortedMovies","sort","first","second","popularity","map","id","poster_path","title","to","state","from","src","alt","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","SectionEl","Title","children","useState","setMovies","useEffect","fetch","getTrending","results","AbortController","abort","api","axios","baseURL","params","api_key","get","response","data","getMovieByQuery","query","encodeURIComponent","getMovieById","getMovieCast","getMovieReviews"],"sourceRoot":""}